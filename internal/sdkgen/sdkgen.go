package sdkgen

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"os"
	"path"
	"strings"

	gitignore "github.com/sabhiram/go-gitignore"
	"github.com/speakeasy-api/openapi-generation/pkg/generate"
	"github.com/speakeasy-api/speakeasy/internal/log"
	"github.com/speakeasy-api/speakeasy/internal/utils"
	"golang.org/x/exp/slices"
	"gopkg.in/yaml.v3"
)

func Generate(ctx context.Context, lang string, schemaPath string, outDir string, baseURL string) error {
	if !slices.Contains(generate.SupportLangs, lang) {
		return fmt.Errorf("language not supported: %s", lang)
	}

	fmt.Printf("Generating SDK for %s...\n", lang)

	conf, err := getConfig(outDir, baseURL)
	if err != nil {
		return fmt.Errorf("failed to load %s/gen.yaml: %w", outDir, err)
	}

	schema, err := os.ReadFile(schemaPath)
	if err != nil {
		return fmt.Errorf("failed to read schema file %s: %w", schemaPath, err)
	}

	if err := cleanOutDir(outDir); err != nil {
		return fmt.Errorf("failed to clean out dir %s: %w", outDir, err)
	}

	writeFuncOpt := generate.WithOnWriteFileFunc(func() func(filename string, data []byte) error {
		return func(filename string, data []byte) error {
			return writeFile(outDir, filename, data)
		}
	}())

	g, err := generate.New(writeFuncOpt, generate.WithLogger(log.Logger()))
	if err != nil {
		return err
	}

	if err := g.Generate(context.Background(), schema, generate.Language(lang), conf); err != nil {
		return errors.New(generate.GetOrderedErrorString(err))
	}

	fmt.Printf("Generating SDK for %s... %s\n", lang, utils.Green("done âœ“"))

	return nil
}

func getConfig(outDir string, baseURL string) (*generate.Config, error) {
	data, err := os.ReadFile(path.Join(outDir, "gen.yaml"))
	if err != nil {
		if !os.IsNotExist(err) {
			return nil, err
		}
		data = []byte{}
	}

	conf := &generate.Config{
		Python: generate.PythonConfig{
			PackageName: "openapi",
			Version:     "0.0.1",
			Author:      "Speakeasy",
			Description: "Python Client SDK Generated by Speakeasy",
		},
		Go: generate.GoConfig{
			PackageName: "openapi",
		},
		BaseServerURL: baseURL,
	}
	if err := yaml.Unmarshal(data, &conf); err != nil {
		return nil, err
	}

	return conf, nil
}

func loadIgnores(outDir string) (*gitignore.GitIgnore, error) {
	data, err := os.ReadFile(path.Join(outDir, ".genignore"))
	if err != nil {
		if !errors.Is(err, os.ErrNotExist) {
			return nil, err
		} else {
			data = []byte{}
		}
	}

	lines := strings.Split(string(data), "\n")

	defaults := []string{
		".git",
		".genignore",
		".gitignore",
		"gen.yaml",
		"README.md",
		"readme.md",
	}

	for _, d := range defaults {
		if !slices.Contains(lines, d) {
			lines = append(lines, d)
		}
	}

	ignorer := gitignore.CompileIgnoreLines(lines...)
	return ignorer, nil
}

func cleanOutDir(outDir string) error {
	if _, err := os.Stat(outDir); os.IsNotExist(err) {
		return nil
	}

	ignorer, err := loadIgnores(outDir)
	if err != nil {
		return err
	}

	_, err = cleanDir(outDir, outDir, ignorer)
	return err
}

func cleanDir(dirToClean string, rootDir string, ignorer *gitignore.GitIgnore) (bool, error) {
	paths, err := os.ReadDir(dirToClean)
	if err != nil {
		return false, err
	}

	fullyClean := true
	for _, p := range paths {
		cleanPath := path.Join(dirToClean, p.Name())
		relativePath := strings.TrimPrefix(cleanPath, rootDir)
		if ignorer.MatchesPath(relativePath) {
			fullyClean = false
			continue
		}

		if p.IsDir() {
			fullyClean, err := cleanDir(cleanPath, rootDir, ignorer)
			if err != nil {
				return false, err
			}

			if fullyClean {
				if err := os.Remove(cleanPath); err != nil {
					return false, err
				}
			}
		} else {
			if err := os.Remove(cleanPath); err != nil {
				return false, err
			}
		}
	}

	return fullyClean, nil
}

func writeFile(outDir, filename string, data []byte) error {
	outFileName := path.Join(outDir, filename)

	dir := path.Dir(outFileName)

	if _, err := os.Stat(dir); os.IsNotExist(err) {
		err := os.MkdirAll(dir, os.ModePerm)
		if err != nil {
			return err
		}
	}

	// If file already exists check if the new content is the same as the existing content
	if _, err := os.Stat(outFileName); !os.IsNotExist(err) {
		existing, err := os.ReadFile(outFileName)
		if err != nil {
			return err
		}

		if bytes.Equal(data, existing) {
			return nil
		} else {
			// TODO write this to a debug directory?
			return fmt.Errorf("found file with different contents on same run - %s", outFileName)
		}
	}

	return os.WriteFile(outFileName, data, os.ModePerm)
}
